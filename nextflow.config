manifest {
  author = 'Dan Fornika'
  name = 'BCCDC-PHL/mlst-nf'
  version = '0.1.1'
  description = 'BCCDC-PHL MLST'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

params {
  profile = false
  cache = ''
  outdir = 'results'
  assembly_exts = ['*.fa', '*.fasta', '*.fna']
  assembly_search_path = makeAssemblySearchPath( assembly_exts )
  assembly_input = 'NO_FILE'
  samplesheet_input = 'NO_FILE'
  minid = 95
  mincov = 10
  minscore = 50
  versioned_outdir = false
  pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
  pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}

def makeAssemblySearchPath ( assembly_exts ) {
    def assembly_search_path = []
    for (ext in assembly_exts) {
        assembly_search_path.add(params.assembly_input.toString() + '/' + ext.toString())
        assembly_search_path.add(params.assembly_input.toString() + '/**/' + ext.toString())
    }
    return assembly_search_path
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
  conda {
     process.conda = "$baseDir/environments/environment.yml"
     if (params.cache){
       conda.cacheDir = params.cache
     }
  }
}
